###
# Задача:
#
#     Выберите одну или несколько сторонних библиотек Python,
#     например, requests, pandas, numpy, matplotlib, pillow.
#     После выбора библиотек(-и) изучите документацию к ней(ним),
#     ознакомьтесь с их основными возможностями и функциями.
#     К каждой библиотеке дана ссылка на документацию ниже.
#
# Если вы выбрали:
#
#     requests - запросить данные с сайта и вывести их в консоль.
#     pandas - считать данные из файла, выполнить простой анализ
#               данных (на своё усмотрение) и вывести результаты
#               консоль.
#     numpy - создать массив чисел, выполнить математические
#               операции с массивом и вывести результаты в консоль.
#     matplotlib - визуализировать данные с помощью библиотеки
#               любым удобным для вас инструментом из библиотеки.
#     pillow - обработать изображение, например, изменить его
#               размер, применить эффекты и сохранить в другой формат.
#
# В приложении к ссылке на GitHub напишите комментарий о
# возможностях, которые предоставила вам выбранная библиотека
# и как вы расширили возможности Python с её помощью.
# Примечания:
#
#     Можете выбрать не более 3-х библиотек для изучения.
#     Желательно продемонстрировать от 3-х функций/классов/методов/операций
#     из каждой выбранной библиотеки.
#
##
####
## Линейный график
#
# Линейный график является одним из основных графиков
# и может быть создан с помощью функции plot().
# Он используется для представления взаимосвязи между
# двумя данными X и Y на разных осях.
#
# Синтаксис:
#
#     matplotlib.pyplot.plot(\*аргументы, scalex=True, scaley=True, data= None, \*\*kwargs)
#
# Пример:
import matplotlib.pyplot as plt
# подготовка данных
x = [10, 20, 30, 40, 50, 60,70]
y = [20, 25, 35, 55, 60, 61, 62]
# построение графика
plt.plot(x, y)
# установка заголовка
plt.title("График роста температуры")
# нанесение меток по оси Y
plt.ylabel('Y-градусы цельсия')
# нанесение меток по оси X
plt.xlabel('X-минуты')
# вывод графика
plt.show()
#
##
###
## Гистограмма
#
# A гистограмма в основном используется для представления данных,
# представленных в виде некоторых групп. Это тип гистограммы,
# где ось X представляет диапазоны ячеек, а ось Y предоставляет
# информацию о частоте. hist()
#   Функция используется для вычисления и создания гистограммы x.
#
# Синтаксис:
#
#     matplotlib.pyplot.hist(x, bins= None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype=’bar’, align=’mid’, orientation=’vertical’, rwidth= None, log=False, color= None, label= None, stacked=False, \*, data=None, \*\*kwargs)
#
# Пример:
# #
# import matplotlib.pyplot as plt
# import pandas as pd
# # создать исходный файл
# data = {'x': [0, 5, 10, 15, 20, 25, 30], 'y': [5, 10 ,30, 25, 15, 7, 3]}
# df = pd.DataFrame(data)
# df.to_csv("tips.csv", index=False)
# # чтение данных из исходного файла
# data = pd.read_csv('tips.csv')
# # построение Х и Y
# x = data['x']
# y =data['y']
# # построение диаграммы
# plt.bar(x, y, label = 'пример')
# # # создание заголовка
# plt.title("Пример столбчатой диаграммы")
# # обозначение оси У
# plt.ylabel('частота облучения')
# # # обозначение оси Х
# plt.xlabel('светимость')
# # # вывод графика
# plt.show()
# #
##
###
## работа с Pandas DataFrame
# import pandas as pd
# data = {'1_column': ['1_value1', '2_value1', '3_value1'],
#         '2_column': ['1_value2', '2_value2', '3_value2'],
#         '3_column': ['1_value3', '2_value3', '3_value3'],
#         '4_column': ['1_value4', '2_value4', '3_value4'],
#         '5_column': ['1_value5', '2_value5', '3_value5'],
#         '6_column': ['1_value6', '2_value6', '3_value6'],
#         '7_column': ['1_value7', '2_value7', '3_value7'],
#         '8_column': ['1_value8', '2_value8', '3_value8'],
#         '9_column': ['1_value9', '2_value9', '3_value9'],
#         '10_column': ['1_value10', '2_value10', '3_value10'],
#         '11_column': ['1_value11', '2_value11', '3_value11'],
#         '12_column': ['1_value12', '2_value12', '3_value12'],
#         }
# df = pd.DataFrame(data)
# df.to_csv("dataframe.csv", index=False)
# #print(df)
# df = pd.read_csv('dataframe.csv')
# df.head()
# df.tail(n = 10)
# df.info()
# print(df)
