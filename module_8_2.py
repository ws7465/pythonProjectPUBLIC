##
#               Задача "План перехват":
#
#           Напишите 2 функции:
#
#       Функция personal_sum(numbers):
# 1.	Должна принимать коллекцию numbers.
# 2.	Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
# 3.	Если же при переборе встречается данное типа отличного от числового,
#           то обработать исключение TypeError, увеличив счётчик incorrect_data на 1.
# 4.	В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел,
#           incorrect_data - кол-во некорректных данных.
#
#       Функция calculate_average(numbers)
#       Среднее арифметическое - сумма всех данных делённая на их количество.
# 1.	Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
# 2.	Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
# 3.	Т.к. коллекция numbers может оказаться пустой, то обработайте исключение
#           ZeroDivisionError при делении на 0 и верните 0.
# 4.	Также в numbers может быть записана не коллекция, а другие типы данных,
#           например числа. Обработайте исключение TypeError выводя строку
#           'В numbers записан некорректный тип данных'. В таком случае функция
#           просто вернёт None.
#
#       Пункты задачи:
# 1.	Создайте функцию personal_sum на основе условий задачи.
# 2.	Создайте функцию calculate_average на основе условий задачи.
# 3.	Вызовите функцию calculate_average несколько раз, передав в неё
#       данные разных вариаций.
#
##
###
def calculate_average(numbers) :
    if isinstance (numbers, str) : numbers = list(numbers)
    try :
        result, incorrect_data = personal_sum(numbers)
        lnum = len(numbers)
        sasum = result / (lnum - incorrect_data)
    except ZeroDivisionError as exc1 :
        rsum = 0
    except TypeError as exc2 :
        print(f'В numbers записан некорректный тип данных ')
        rsum = None
    else :
        rsum = sasum
    return rsum
#
def personal_sum(numbers) :
    result=0
    incorrect_data=0
    for j in numbers :
        try:
            temp = int(j)
            temp = float(j)
        except TypeError:
            print(f'Некорректный тип данных для подсчёта суммы - {j}')
            incorrect_data += 1
            continue
        except ValueError:
            print(f'Некорректный тип данных для подсчёта суммы - {j}')
            incorrect_data += 1
            continue
        if isinstance (j, str) :
            incorrect_data += 1
            print(f'Некорректный тип данных для подсчёта суммы - {j}')
            continue
        result += j
    return result, incorrect_data
#
print(f'Результат 1: {calculate_average("1, 2, 3")}\n') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}\n') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}\n') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}\n') # Всё должно раб
###
##
# Пример результата выполнения программы:
# Пример выполнения программы:
# print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
# print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
# print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
# print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать
# Вывод на консоль:
# Некорректный тип данных для подсчёта суммы - 1
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 2
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 3
# Результат 1: 0
# Некорректный тип данных для подсчёта суммы - Строка
# Некорректный тип данных для подсчёта суммы - Ещё Строка
# Результат 2: 2.0
# В numbers записан некорректный тип данных
# Результат 3: None
# Результат 4: 26.5
#
#
#  конец задачи
#
